---------------------------------------------------------------------------------------------------------
INTRODUCTION: 
---------------------------------------------------------------------------------------------------------

NOTE: From Nov 2022, exam pattern is changing for Solution Architect - Professional.

---------------------------------------------------------------------------------------------------------
AWS ACCOUNTS: 
---------------------------------------------------------------------------------------------------------

Introduction: 

    AWS Account is container for identity (users) and resources. 

    Account Root user - Create account with unique email address and using credit card. It has full access control to aws resources. 

    By default all access to aws account & resources are DENIED except for Account root user. It requires to explicit ALLOW to access resources. 


Multi Factor Authentication: 

    Factors - It is different pieces of evidences which prove identity.
    
    Multi Factors - Multiple factors to prove idendity. 
    
    Types of factors: 
        Knowledge   -   username & password 
        Possession  -   card # , MFA device. 
        Inherent    -   fingerprint, iris 
        Location    -   location of user. 

    More factors means more security. 

    In AWS, based on username and password generates the KEY + other information in QR format which can be scanned to generate the verification code. 


Securing an AWS Account: 

    Using MFA: 

        Select root account -> Security Credentials. 


Creating budget: 

    Cost explorer provides reporting, analytics and visualization capabilities that can use to track and manage aws costs. 

            root account -> Billing dashboard -> cost management -> cost explorer 

    AWS budget is used to set custom budget to alert when threshold is reached. It requires cost explorer to be enabled to work. 

            root account -> Billing dashboard -> cost management -> budget 

            Create Budget: 
                    1. Select budget limit, budget name 
                    2. Select email recepients. 
                    3. Can select SNS target. 


Creating production account: 

    Create a brand new account as production with MFA feature and enable the budget alert. 


Adding an IAM Admin: 

    IAM -> Users -> Attach permission directly.

    IAM -> Users -> Group -> In group, attach permission

    https://meeran-general.signin.aws.amazon.com/console
    https://meeran-production.signin.aws.amazon.com/console


IAM Access Keys:     

    username and password is single attached to user. 

    access key can be multiple and can be enable, disable and delete. 

    aws configure --profile profile-name 


---------------------------------------------------------------------------------------------------------
ADVANCED PERMISSIONS AND ACCOUNTS: 
---------------------------------------------------------------------------------------------------------

AWS ORGANIZATIONS: 

    Each organization requires multiple accounts and managing separately is tedious if account increases.
    
    With AWS Organization, accounts are managed.

    Management account is from which account organization is created. 

    Master or Management or payer account. Using management account, can invite other accounts to join. Once joined, standard account become memeber account of organization.

    Using AWS organization, can create new account directly or invite existing account. 

    Consolidated billing features. 

    Service Control Policy 

    General practice is to create separate accounts for payments (management), user account (integraet with federation iddendity). From user account, do switch role to assume the role in other accounts. 


    CONSOLE: 

        Create Organization:  

            account -> organization -> create organization -> Automatically added as management account. 

        Invite the account: 

            account -> organization -> Add an AWS account -> Send Invite to existing account. 

        Accept the invitation: 

            account -> organization -> Invitations -> Accept Invitations 

        Create Account: 

            account -> organization -> create account -> unique email + name + rolename 

        Create Organization Unit (OU): 

            account -> organization -> Root -> Create organization 


    ROLE SWITCH: 

        For account created using organization, ROLE (OrganizationAccountAccessRole) is created automatically and can be use switch role.

        For invited account, requires to create the role. 

        CREATE ROLE IN INVITED ACCOUNT FOR MANAGEMENT ACCOUNT TO USE FOR ROLE SWITCH: 

            IAM -> Role -> AWS Account -> Management account nbr -> Attach policy 

        TO SWITCH ROLE: 
            In AWS Organization, it helps administrator to easily manage accounts. 

            From management account -> account -> Switch Role -> 
    
    
    SERVICE CONTROL POLICY: 

        It is a JSON policy and can be attached at Root level, OU level or account level. 

        If attached at root level, then affect all OU and accounts. If at OU level, affect the accounts under the OU.

        NOTE: Management account cannot be affect by this SCP at any level. 

        SCP doesnot grant any permission but it is account level permission boundaries. 

        Account root user has full access in account but indirectly can be restricted by using SCP.

        Access can be provided by 2 ways, 
            1. Explicit allow all (default policy) and explicit deny few services.
            2. Delete default and Explicit allow few services only. (more secure)

            Implicit Deny -> Explicit Allow -> Explicit Deny 

        CONSOLE: 
            1. First to enable the SCP: 
                    Organization -> Policy -> SCP -> ENABLE (Default create with FullAWSAccess policy) and attach to ROOT by default.

---------------------------------------------------------------------------------------------------------

SECURITY TOKEN SERVICE (STS):

    Whenever role is assumed, it pass to STS:AssumeRole*.

    User -> Assume a Role -> STS -> Check Identity maintained in Trust policy   -> If allowed, then get the permission -> Return access key, secret id, session token & expiration date. 
    
    STS does 2 things, 
            1. Check trust policy is maintained. 
            2. If maintained, get the permission policy and return the access details.

    Identity can be switch role, cross account role and other AWS resources. 


REVOKING IAM ROLE TEMPORARY SECURITY CREDENTIALS: 
    
    Temporary credentials cannot be manually cancelled or invalidated and it is valid till expiry time.

    Incase if temporary credentials are compromised, "Revoke session" is used to add a conditional deny policy which DENY any session assumed < NOW. So legitimate users can assume the role again but illegitimate users cant assume again.

    During Revoke session, it will add "AWSRevokeOlderSessions" inline policy to role. 

    CONSOLE: 

        IAM -> Role -> View Role -> Revoke Sessions -> Revoke active sessions. 

                    "Condition": {
                        "DateLessThan": {
                            "aws:TokenIssueTime": "[policy creation time]"
                        }
                    }

---------------------------------------------------------------------------------------------------------

POLICY INTERPRETATION: 

    Implicit Deny -> Explicit Allow -> Explicit Deny 

    {
        Version: "2012-"
        Statement: [{
            Sid: "statement id 1"
            Effect: "allow" or "deny"
            Action: ["s3*", "ec2*"]  or NotAction: []
            Resource: "s3*"
            Condition: {}
        }, {}, {}]
    }

    NOTE: If single statement with DENY effect. It is no useful because by default implicit DENY. So single statement with DENY is used in conjugation with other ALLOW policy.

    Concentrate on NotAction , StringNotEquals conditions.


PERMISSION BOUNDARIES: 

    This is at identity level. It doesnot grant any access. It limit the permission of the identity permission.

    It helps for delegation access. 

    For example: 
        Bob (admin) believes tom and want to give full iam:* access.
        This cause probelms, 
            Tom can change his own IAM permission.
            Create another user with administrator access.

    To solve this problem,
        1. Bob create a user boundary and allow only that user level access ${aws:user}
        2. Create user Tom and assign a permission boundary + policy not to change his identity + cant edit permission boundary. 


PERMISSIONS EVALUATION LOGIC: 

    For same account: 

        Explicit Deny -> SCP -> Resource Policy(Allowed then stops)  -> Permission Boundary -> Session Policy (Assume a Role) -> Identity policy 

    For cross account: 

        Account A (Identity policy) -> Account B (Resource policy)

        Account A to allow access to Account B <> Account B to allow access from Account A 

        Allow <> Allow  then Allow 
        Deny <> Allow   then Deny 
        Deny <> Allow   then Deny 

---------------------------------------------------------------------------------------------------------

CROSS ACCOUNT ACCESS TO S3: 

    ACL: 

        It is legacy method of giving permission and AWS no longer recommend this. 
        Account canonical user id 
        Whoever uploaded (owner) only have permission even bucket owner is different.

        1. Create the bucket in Account B. 
            a. Create the ACL access to allow from A. Use Account A Canonical name.
        2. From Account A, Switch Role to Account B.
        3. Upload the objects in Account B.
        4. Only Account A have access (owner) not Account B (Bucket owner).

        NOTE: "Object ownership" - helps to override this behaviour and allows bucket owner to own the object by default. 

        Objects owned by uploader. 

    Bucket Policy: 

        1. Create a bucket policy.  
                principal = Account A 
        2. Attach the policy to Account B
        3. From Account A, able to access Account B. 

        Objects owned by uploader. 

    Cross Account Role: 

        Objects owned by bucket owner. 

        1. Create a role with trust policy of cross account and s3 bucket permission.
        2. From Account A, switch role to s3 role.

---------------------------------------------------------------------------------------------------------

AWS RESOURCE ACCESS MANAGER (RAM): 

    Within organization, it helps to share resources at organization, OU and Account level.

    Only RAM supported products can be shared.

    No cost for RAM but cost for underlying resources used.

    It influences changes in traditional architecture.

    NOTE:   Availability zone in 1 account (us-east-1) is not same for another account (us-east-1)
            Availability zone ID (use1-az1) is consistent or same accross the accounts. 

    Owner Account:  Owns the resource and create a share. 
                    Owner retains full permissionship.
                    Defines the principal (org,ou,acc) to whom to share.
                    If participant inside an ORG, acceptance happen automatically. Any non ORG account, based on invite to accept. 
    
    USE CASE: 

        In organization, owner account create a VPC, Subnet & security group and shared with participant accounts.
        Participant accounts can only have Read access to utilize and cannot be modified.
        Only owner account can modify, delete resources.
        If participant account create ec2 instance under shared subnets, ec2 is owned by only participant account not owner account. 

    CONSOLE: 

        RAM -> Settings -> Enable Sharing within organization.

        RAM -> Create resource share -> Name, Resources, Organizations -> Create 

        Resources -> Shared by Me , Resources -> Shared with Me

        NOTE: Name is not tagged in shared resource and participant account can update name. One participant account created resource cannot seen by other participant accounts. 

---------------------------------------------------------------------------------------------------------

SERVICE QUOTAS: 

    Quota is limit on the AWS resources.

    Service normally have per region quota.

    Global services have account level quota.

    Most service quotas can be increased.

    Hard limit cannot be changes: 
        IAM user of 5000 per account.

    https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html

    AWS -> Service Quotas -> AWS Resources.
        Quota Name, Applied Quota value, Aws default quota value, Adjustable
        View quota -> Request Quota Increase 

        View quota -> Monitoring. 
            If threshold is reached, then alarm the quota limit.

    Organization -> Quota Request Template.

    Support -> Ticket to increase quota limit.


---------------------------------------------------------------------------------------------------------
ADVANCED IDENTITIES AND FEDERATION: 
---------------------------------------------------------------------------------------------------------

SAML2.0 IDENTITY FEDERATION: 

    NOTE: AWS Only understand the AWS credentials to allow access to resources.

    Here using another identity provider to get identity to access AWS resources.

    SAML2 is used in enterprise identity federation.

    SAML2: 
        Security Assertion Markup language
        Many onpremise identity provider uses SAML2 

    use case: 
        If no of user > 5000
        Enterprise identity provider + SAML2 compatible
        If requires existing IAM team to manage with single source of identity truth.

    It uses IAM roles and Temporary security credential valid for 12 hours. 

    ARCHITECTURE for Application: 

        1. Trust relationship establish between Idp and IAM.
        2. Application call Idp which authenticated and return SAML assertion.
        3. Application call STS to get temporary credential.
        4. Application call AWS resources to access.

    ARCHITECTURE for USER LOGIN: 

        1. Trust relationship establish between Idp and SAML/SSO endpoint.
        2. Client call Idp which authenticated and return SAML assertion.
        3. CLient send the SAML assertion to SSO endpoint. 
        4. From SSO, call STS assume role.
        5. SAML Endpoint generate the URL and Client uses to access AWS console.

---------------------------------------------------------------------------------------------------------

AWS SINGLE SIGN ON (SSO): 

    It helps to centrally manage sso access and user permission for accounts in organization.

    Requirement is valid AWS organization is created.

    It is extension of AWS organization.

    AWS SSO supports multiple identity source, 
        built in identity stores.
        AWS Managed microsoft AD 
        On premise microsoft AD 
        External SAML2 identity

    AWS SSO is recommended. 

    https://jumpcloud.com/blog/aws-iam-vs-aws-sso


    CONSOLE: 

        AWS SSO -> Enable 

        https://d-9067b1117b.awsapps.com/start  - can customize the URL.

        Identity source -> AWS SSO, Active Directory, External Identity Provider.

        Permission sets -> Predefined or custom permission sets. Session duration can select.

        Users & Groups can be created.


        User portal URL: https://d-9067b1117b.awsapps.com/start, Username: sally, One-time password: 

        1. Create a user, group and permission sets.
        2. From aws account, assign user/group to account.
        3. Assign a permission (Permission Set Name is displayed).

        AWS SSO -> Applications -> Can integrate 3rd party applications.

    To enable MFA: 

        SSO -> Settings -> Network & Security -> MFA 

---------------------------------------------------------------------------------------------------------

AMAZON COGNITO - USER AND IDENTITY POOLS: 

    It provides authentication, authorization and user management for web/mobile applications.

    It consists of user pools and identity pools
        User Pools -    Signin and provide JWT (Json web token) and few AWS services accepts JWT like API gateway. 
                        It supports SAML2 , Facebook, login, Identity federation.
                        Used for signup and signin.

        identity pools -    It provides AWS credentials by exchange JWT.
                            Even user pool , google, saml2 identity used for exchange.
                            Swapping authenticated or unauthenticated identity for credentials.
                            Assume the role on behalf of identity.
                            It can deal both authenticated or unauthenticated identity.

    1. User is authenticated with external identity like google, facebook etc.
    2. User pools returns the JWT to web/mobile application.
    3. Web/mobile application send JWT to Identity Pool.
    4. Identity Pool assume the role and generate the temporary credentials.
    5. Identit pool return the temporary credentials to web/mobile application.

    CONSOLE: 

        Cognito -> Create a user pool 
        Cognito -> Identity pool or Federated identities.

---------------------------------------------------------------------------------------------------------

AMAZON WORKSPACE: 

    It is AWS Desktop As A Service.

    It uses directory services (simple AD or AD Connector) for user management and authentication.

    NOTE: Only support AWS Directory services (Simple AD, Microsoft AD & AD Connector)

    It consists of AWS Managed and Customer managed VPC.

    All management related services (AD, Workspace, authentication gateway) in AWS managed VPC.

    From AWS Managed VPC, these services interact with Customer managed VPC through ENI. From there it connect to VPN or Direct connect through Nat gateway and Internet gateway. 

    To function workspace, it requires Directory services and VPC.
    
---------------------------------------------------------------------------------------------------------

AWS MANAGED MICROSOFT AD: 

    Standard    -   support 5000 users and 30000 objects.
    Enterprise  -   Support upto 500,000 objects.

    If require native microsoft authentication, then recommend this.

    Can configure a trust relationship between AWS managed microsoft AD and On pprem microsoft AD, so users and groups access resources in either domain.

    Capable of operating independetly if link broken between onprem and aws.

    Can integrate with MFA (Radius based server).

    Support microsoft schema extension.

    Can establish two way trust between onprem and aws managed AD.

---------------------------------------------------------------------------------------------------------

AD CONNECTOR: 

    It appears as native directory.
    It send the request to onprem active directory and does not store any data.

    Useful in proof of concept and no need to keep AD in AWS.

    It consists of below based on compute power,
        Small
        Large

    It placed in 2 subnets with in VPC and requires 1 or more AD .

    It requires working network connectivity between AWS and On prem through Direct connect or VPN connection etc.

    Select only when,
    Proof of concept
    Legal or compliance reason not in AWS 


---------------------------------------------------------------------------------------------------------
NETWORKING AND HYBRID: 
---------------------------------------------------------------------------------------------------------

    